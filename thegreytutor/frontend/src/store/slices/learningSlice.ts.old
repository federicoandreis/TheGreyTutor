import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { LearningState, MiddleEarthLocation, Achievement, Quiz, LearningProgress } from '../../types';

const initialState: LearningState = {
  locations: [],
  currentLocation: null,
  progress: null,
  achievements: [],
  quizzes: [],
  isLoading: false,
  error: null,
};

const learningSlice = createSlice({
  name: 'learning',
  initialState,
  reducers: {
    setLocations: (state, action: PayloadAction<MiddleEarthLocation[]>) => {
      state.locations = action.payload;
    },
    setCurrentLocation: (state, action: PayloadAction<MiddleEarthLocation | null>) => {
      state.currentLocation = action.payload;
    },
    setProgress: (state, action: PayloadAction<LearningProgress>) => {
      state.progress = action.payload;
    },
    setAchievements: (state, action: PayloadAction<Achievement[]>) => {
      state.achievements = action.payload;
    },
    setQuizzes: (state, action: PayloadAction<Quiz[]>) => {
      state.quizzes = action.payload;
    },
    setLoading: (state, action: PayloadAction<boolean>) => {
      state.isLoading = action.payload;
    },
    setError: (state, action: PayloadAction<string | null>) => {
      state.error = action.payload;
    },
    unlockLocation: (state, action: PayloadAction<string>) => {
      const location = state.locations.find(loc => loc.id === action.payload);
      if (location) {
        location.isUnlocked = true;
      }
      if (state.progress) {
        state.progress.unlockedLocations.push(action.payload);
      }
    },
    completeQuest: (state, action: PayloadAction<string>) => {
      if (state.progress) {
        state.progress.completedQuests.push(action.payload);
      }
    },
    unlockAchievement: (state, action: PayloadAction<string>) => {
      const achievement = state.achievements.find(ach => ach.id === action.payload);
      if (achievement) {
        achievement.unlockedAt = new Date().toISOString();
        achievement.progress = 100;
      }
      if (state.progress) {
        state.progress.achievements.push(action.payload);
      }
    },
    updateExperience: (state, action: PayloadAction<number>) => {
      if (state.progress) {
        state.progress.totalExperience += action.payload;
        // Simple level calculation
        const newLevel = Math.floor(state.progress.totalExperience / 1000) + 1;
        if (newLevel > state.progress.level) {
          state.progress.level = newLevel;
        }
      }
    },
  },
});

export const {
  setLocations,
  setCurrentLocation,
  setProgress,
  setAchievements,
  setQuizzes,
  setLoading,
  setError,
  unlockLocation,
  completeQuest,
  unlockAchievement,
  updateExperience,
} = learningSlice.actions;

export default learningSlice.reducer;

// Selectors
export const selectLearning = (state: { learning: LearningState }) => state.learning;
export const selectLocations = (state: { learning: LearningState }) => state.learning.locations;
export const selectCurrentLocation = (state: { learning: LearningState }) => state.learning.currentLocation;
export const selectProgress = (state: { learning: LearningState }) => state.learning.progress;
export const selectAchievements = (state: { learning: LearningState }) => state.learning.achievements;
export const selectQuizzes = (state: { learning: LearningState }) => state.learning.quizzes;
export const selectUnlockedLocations = (state: { learning: LearningState }) => 
  state.learning.locations.filter(loc => loc.isUnlocked);
export const selectUnlockedAchievements = (state: { learning: LearningState }) => 
  state.learning.achievements.filter(ach => ach.unlockedAt);
