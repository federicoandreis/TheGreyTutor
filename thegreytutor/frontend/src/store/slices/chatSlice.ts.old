import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';
import { ChatState, ChatSession, ChatMessage, Agent } from '../../types';
import { mockDB } from '../../services/mockDatabase';

// Async thunks for chat operations using mock database
export const sendMessage = createAsyncThunk(
  'chat/sendMessage',
  async (messageData: { message: string; sessionId?: string; location?: string }, { rejectWithValue }) => {
    try {
      const result = await mockDB.sendMessage(messageData);
      return result;
    } catch (error) {
      return rejectWithValue(error instanceof Error ? error.message : 'Failed to send message');
    }
  }
);

export const loadChatSessions = createAsyncThunk(
  'chat/loadChatSessions',
  async (_, { rejectWithValue }) => {
    try {
      const sessions = await mockDB.getChatSessions();
      return sessions;
    } catch (error) {
      return rejectWithValue(error instanceof Error ? error.message : 'Failed to load chat sessions');
    }
  }
);

export const createChatSession = createAsyncThunk(
  'chat/createChatSession',
  async (sessionData: { title?: string; location?: string }, { rejectWithValue }) => {
    try {
      const session = await mockDB.createChatSession(sessionData);
      return session;
    } catch (error) {
      return rejectWithValue(error instanceof Error ? error.message : 'Failed to create chat session');
    }
  }
);

export const loadAgentStatus = createAsyncThunk(
  'chat/loadAgentStatus',
  async (_, { rejectWithValue }) => {
    try {
      // Mock agent status - return empty array for now
      await new Promise(resolve => setTimeout(resolve, 300));
      return [];
    } catch (error) {
      return rejectWithValue(error instanceof Error ? error.message : 'Failed to load agent status');
    }
  }
);

const initialState: ChatState = {
  sessions: [],
  currentSession: null,
  isLoading: false,
  error: null,
  agents: [],
};

const chatSlice = createSlice({
  name: 'chat',
  initialState,
  reducers: {
    clearError: (state) => {
      state.error = null;
    },
    setCurrentSession: (state, action: PayloadAction<ChatSession | null>) => {
      state.currentSession = action.payload;
    },
    addMessage: (state, action: PayloadAction<ChatMessage>) => {
      if (state.currentSession) {
        state.currentSession.messages.push(action.payload);
        state.currentSession.updatedAt = new Date().toISOString();
      }
    },
    updateMessage: (state, action: PayloadAction<{ messageId: string; updates: Partial<ChatMessage> }>) => {
      if (state.currentSession) {
        const messageIndex = state.currentSession.messages.findIndex(
          msg => msg.id === action.payload.messageId
        );
        if (messageIndex !== -1) {
          state.currentSession.messages[messageIndex] = {
            ...state.currentSession.messages[messageIndex],
            ...action.payload.updates,
          };
        }
      }
    },
    deleteMessage: (state, action: PayloadAction<string>) => {
      if (state.currentSession) {
        state.currentSession.messages = state.currentSession.messages.filter(
          msg => msg.id !== action.payload
        );
      }
    },
    archiveSession: (state, action: PayloadAction<string>) => {
      const session = state.sessions.find(s => s.id === action.payload);
      if (session) {
        session.isArchived = true;
      }
      if (state.currentSession?.id === action.payload) {
        state.currentSession = null;
      }
    },
    updateSessionTitle: (state, action: PayloadAction<{ sessionId: string; title: string }>) => {
      const session = state.sessions.find(s => s.id === action.payload.sessionId);
      if (session) {
        session.title = action.payload.title;
      }
      if (state.currentSession?.id === action.payload.sessionId) {
        state.currentSession.title = action.payload.title;
      }
    },
    addMessageReaction: (state, action: PayloadAction<{ messageId: string; reaction: any }>) => {
      if (state.currentSession) {
        const message = state.currentSession.messages.find(msg => msg.id === action.payload.messageId);
        if (message) {
          if (!message.reactions) {
            message.reactions = [];
          }
          message.reactions.push(action.payload.reaction);
        }
      }
    },
    updateAgentStatus: (state, action: PayloadAction<Agent[]>) => {
      state.agents = action.payload;
    },
  },
  extraReducers: (builder) => {
    // Send Message
    builder
      .addCase(sendMessage.pending, (state) => {
        state.isLoading = true;
        state.error = null;
      })
      .addCase(sendMessage.fulfilled, (state, action) => {
        state.isLoading = false;
        
        // Add the assistant's response to current session
        if (state.currentSession && action.payload.response) {
          const assistantMessage: ChatMessage = {
            id: action.payload.response.id || Date.now().toString(),
            content: action.payload.response.message,
            role: 'assistant',
            timestamp: new Date().toISOString(),
            metadata: action.payload.response.metadata,
          };
          state.currentSession.messages.push(assistantMessage);
          state.currentSession.updatedAt = new Date().toISOString();
        }
        
        // Update session if provided
        if (action.payload.session) {
          const sessionIndex = state.sessions.findIndex(s => s.id === action.payload.session.id);
          if (sessionIndex !== -1) {
            state.sessions[sessionIndex] = action.payload.session;
          } else {
            state.sessions.unshift(action.payload.session);
          }
          state.currentSession = action.payload.session;
        }
      })
      .addCase(sendMessage.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.payload as string;
      });

    // Load Chat Sessions
    builder
      .addCase(loadChatSessions.pending, (state) => {
        state.isLoading = true;
        state.error = null;
      })
      .addCase(loadChatSessions.fulfilled, (state, action) => {
        state.isLoading = false;
        state.sessions = action.payload;
      })
      .addCase(loadChatSessions.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.payload as string;
      });

    // Create Chat Session
    builder
      .addCase(createChatSession.pending, (state) => {
        state.isLoading = true;
        state.error = null;
      })
      .addCase(createChatSession.fulfilled, (state, action) => {
        state.isLoading = false;
        state.sessions.unshift(action.payload);
        state.currentSession = action.payload;
      })
      .addCase(createChatSession.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.payload as string;
      });

    // Load Agent Status
    builder
      .addCase(loadAgentStatus.pending, (state) => {
        // Don't set loading for agent status as it's background
      })
      .addCase(loadAgentStatus.fulfilled, (state, action) => {
        state.agents = action.payload;
      })
      .addCase(loadAgentStatus.rejected, (state, action) => {
        // Don't set error for agent status as it's background
        console.warn('Failed to load agent status:', action.payload);
      });
  },
});

export const {
  clearError,
  setCurrentSession,
  addMessage,
  updateMessage,
  deleteMessage,
  archiveSession,
  updateSessionTitle,
  addMessageReaction,
  updateAgentStatus,
} = chatSlice.actions;

export default chatSlice.reducer;

// Selectors
export const selectChat = (state: { chat: ChatState }) => state.chat;
export const selectChatSessions = (state: { chat: ChatState }) => state.chat.sessions;
export const selectCurrentSession = (state: { chat: ChatState }) => state.chat.currentSession;
export const selectChatLoading = (state: { chat: ChatState }) => state.chat.isLoading;
export const selectChatError = (state: { chat: ChatState }) => state.chat.error;
export const selectAgents = (state: { chat: ChatState }) => state.chat.agents;
export const selectActiveAgents = (state: { chat: ChatState }) => 
  state.chat.agents.filter(agent => agent.isActive);
export const selectHealthyAgents = (state: { chat: ChatState }) => 
  state.chat.agents.filter(agent => agent.healthStatus === 'healthy');
