[
  {
    "type": "procedure",
    "name": "apoc.text.phoneticDelta",
    "text": "Returns the US_ENGLISH soundex character difference between the two given `STRING` values.",
    "signature": "apoc.text.phoneticDelta(text1 :: STRING, text2 :: STRING) :: (phonetic1 :: STRING, phonetic2 :: STRING, delta :: INTEGER)",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.coll.sortText",
    "text": "Sorts the given `LIST<STRING>` into ascending order.",
    "signature": "apoc.coll.sortText(coll :: LIST<STRING>, conf = {} :: MAP) :: LIST<ANY>",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.base64Decode",
    "text": "Decodes the given Base64 encoded `STRING`.",
    "signature": "apoc.text.base64Decode(text :: STRING) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.base64Encode",
    "text": "Encodes the given `STRING` with Base64.",
    "signature": "apoc.text.base64Encode(text :: STRING) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.base64UrlDecode",
    "text": "Decodes the given Base64 encoded URL.",
    "signature": "apoc.text.base64UrlDecode(url :: STRING) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.base64UrlEncode",
    "text": "Encodes the given URL with Base64.",
    "signature": "apoc.text.base64UrlEncode(url :: STRING) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.byteCount",
    "text": "Returns the size of the given `STRING` in bytes.",
    "signature": "apoc.text.byteCount(text :: STRING, charset = UTF-8 :: STRING) :: INTEGER",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.bytes",
    "text": "Returns the given `STRING` as bytes.",
    "signature": "apoc.text.bytes(text :: STRING, charset = UTF-8 :: STRING) :: LIST<ANY>",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.camelCase",
    "text": "Converts the given `STRING` to camel case.",
    "signature": "apoc.text.camelCase(text :: STRING) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.capitalize",
    "text": "Capitalizes the first letter of the given `STRING`.",
    "signature": "apoc.text.capitalize(text :: STRING) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.capitalizeAll",
    "text": "Capitalizes the first letter of every word in the given `STRING`.",
    "signature": "apoc.text.capitalizeAll(text :: STRING) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.charAt",
    "text": "Returns the `INTEGER` value of the character at the given index.",
    "signature": "apoc.text.charAt(text :: STRING, index :: INTEGER) :: INTEGER",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.clean",
    "text": "Strips the given `STRING` of everything except alpha numeric characters and converts it to lower case.",
    "signature": "apoc.text.clean(text :: STRING) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.code",
    "text": "Converts the `INTEGER` value into a `STRING`.",
    "signature": "apoc.text.code(codepoint :: INTEGER) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.compareCleaned",
    "text": "Compares two given `STRING` values stripped of everything except alpha numeric characters converted to lower case.",
    "signature": "apoc.text.compareCleaned(text1 :: STRING, text2 :: STRING) :: BOOLEAN",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.decapitalize",
    "text": "Turns the first letter of the given `STRING` from upper case to lower case.",
    "signature": "apoc.text.decapitalize(text :: STRING) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.decapitalizeAll",
    "text": "Turns the first letter of every word in the given `STRING` to lower case.",
    "signature": "apoc.text.decapitalizeAll(text :: STRING) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.distance",
    "text": "Compares the two given `STRING` values using the Levenshtein distance algorithm.",
    "signature": "apoc.text.distance(text1 :: STRING, text2 :: STRING) :: INTEGER",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.doubleMetaphone",
    "text": "Returns the double metaphone phonetic encoding of all words in the given `STRING` value.",
    "signature": "apoc.text.doubleMetaphone(value :: STRING) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.format",
    "text": "Formats the given `STRING` with the given parameters.",
    "signature": "apoc.text.format(text :: STRING, params :: LIST<ANY>, language = en :: STRING) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.fuzzyMatch",
    "text": "Performs a fuzzy match search of the two given `STRING` values.",
    "signature": "apoc.text.fuzzyMatch(text1 :: STRING, text2 :: STRING) :: BOOLEAN",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.hammingDistance",
    "text": "Compares the two given `STRING` values using the Hamming distance algorithm.",
    "signature": "apoc.text.hammingDistance(text1 :: STRING, text2 :: STRING) :: INTEGER",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.hexCharAt",
    "text": "Returns the hexadecimal value of the given `STRING` at the given index.",
    "signature": "apoc.text.hexCharAt(text :: STRING, index :: INTEGER) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.hexValue",
    "text": "Returns the hexadecimal value of the given value.",
    "signature": "apoc.text.hexValue(value :: INTEGER) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.indexOf",
    "text": "Returns the first occurrence of the lookup `STRING` in the given `STRING`, or -1 if not found.",
    "signature": "apoc.text.indexOf(text :: STRING, lookup :: STRING, from = 0 :: INTEGER, to = -1 :: INTEGER) :: INTEGER",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.indexesOf",
    "text": "Returns all occurrences of the lookup `STRING` in the given `STRING`, or an empty list if not found.",
    "signature": "apoc.text.indexesOf(text :: STRING, lookup :: STRING, from = 0 :: INTEGER, to = -1 :: INTEGER) :: LIST<ANY>",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.jaroWinklerDistance",
    "text": "Compares the two given `STRING` values using the Jaro-Winkler distance algorithm.",
    "signature": "apoc.text.jaroWinklerDistance(text1 :: STRING, text2 :: STRING) :: FLOAT",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.join",
    "text": "Joins the given `STRING` values using the given delimiter.",
    "signature": "apoc.text.join(texts :: LIST<STRING>, delimiter :: STRING) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.levenshteinDistance",
    "text": "Compares the given `STRING` values using the Levenshtein distance algorithm.",
    "signature": "apoc.text.levenshteinDistance(text1 :: STRING, text2 :: STRING) :: INTEGER",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.levenshteinSimilarity",
    "text": "Returns the similarity (a value within 0 and 1) between the two given `STRING` values based on the Levenshtein distance algorithm.",
    "signature": "apoc.text.levenshteinSimilarity(text1 :: STRING, text2 :: STRING) :: FLOAT",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.lpad",
    "text": "Left pads the given `STRING` by the given width.",
    "signature": "apoc.text.lpad(text :: STRING, count :: INTEGER, delimiter =   :: STRING) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.phonetic",
    "text": "Returns the US_ENGLISH phonetic soundex encoding of all words of the `STRING`.",
    "signature": "apoc.text.phonetic(text :: STRING) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.random",
    "text": "Generates a random `STRING` to the given length using a length parameter and an optional `STRING` of valid characters.
Unsuitable for cryptographic use-cases.",
    "signature": "apoc.text.random(length :: INTEGER, valid = A-Za-z0-9 :: STRING) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.regexGroups",
    "text": "Returns all groups matching the given regular expression in the given text.",
    "signature": "apoc.text.regexGroups(text :: STRING, regex :: STRING) :: LIST<ANY>",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.regreplace",
    "text": "Finds and replaces all matches found by the given regular expression with the given replacement.",
    "signature": "apoc.text.regreplace(text :: STRING, regex :: STRING, replacement :: STRING) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.repeat",
    "text": "Returns the result of the given item multiplied by the given count.",
    "signature": "apoc.text.repeat(item :: STRING, count :: INTEGER) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.replace",
    "text": "Finds and replaces all matches found by the given regular expression with the given replacement.",
    "signature": "apoc.text.replace(text :: STRING, regex :: STRING, replacement :: STRING) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.rpad",
    "text": "Right pads the given `STRING` by the given width.",
    "signature": "apoc.text.rpad(text :: STRING, count :: INTEGER, delimiter =   :: STRING) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.slug",
    "text": "Replaces the whitespace in the given `STRING` with the given delimiter.",
    "signature": "apoc.text.slug(text :: STRING, delimiter = - :: STRING) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.snakeCase",
    "text": "Converts the given `STRING` to snake case.",
    "signature": "apoc.text.snakeCase(text :: STRING) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.sorensenDiceSimilarity",
    "text": "Compares the two given `STRING` values using the Sørensen–Dice coefficient formula, with the provided IETF language tag.",
    "signature": "apoc.text.sorensenDiceSimilarity(text1 :: STRING, text2 :: STRING, languageTag = en :: STRING) :: FLOAT",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.split",
    "text": "Splits the given `STRING` using a given regular expression as a separator.",
    "signature": "apoc.text.split(text :: STRING, regex :: STRING, limit = 0 :: INTEGER) :: LIST<ANY>",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.swapCase",
    "text": "Swaps the cases in the given `STRING`.",
    "signature": "apoc.text.swapCase(text :: STRING) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.toCypher",
    "text": "Converts the given value to a Cypher property `STRING`.",
    "signature": "apoc.text.toCypher(value :: ANY, config = {} :: MAP) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.toUpperCase",
    "text": "Converts the given `STRING` to upper case.",
    "signature": "apoc.text.toUpperCase(text :: STRING) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.upperCamelCase",
    "text": "Converts the given `STRING` to upper camel case.",
    "signature": "apoc.text.upperCamelCase(text :: STRING) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.urldecode",
    "text": "Decodes the given URL encoded `STRING`.",
    "signature": "apoc.text.urldecode(text :: STRING) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  },
  {
    "type": "function",
    "name": "apoc.text.urlencode",
    "text": "Encodes the given URL `STRING`.",
    "signature": "apoc.text.urlencode(text :: STRING) :: STRING",
    "roles": null,
    "writes": null,
    "core": true,
    "isDeprecated": false
  }
]